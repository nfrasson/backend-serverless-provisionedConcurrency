service: serverless-provisioned-concurrency
frameworkVersion: "^3"

plugins:
  - serverless-api-gateway-caching

params:
  default:
    defaultResourceName: ${self:service}-${self:provider.stage}

custom:
  apiGatewayCaching:
    enabled: true
    clusterSize: "0.5"
    ttlInSeconds: 3600
    dataEncrypted: false
    perKeyInvalidation:
      requireAuthorization: false

provider:
  name: aws
  stage: dev
  region: sa-east-1
  runtime: nodejs18.x
  architecture: arm64
  timeout: 10
  memorySize: 256
  logRetentionInDays: 1
  layers:
    - { Ref: LayerCommonLambdaLayer }
  apiGateway:
    shouldStartNameWithService: true
  environment:
    STAGE: ${self:provider.stage}
    API_GATEWAY_ID: !Ref ApiGatewayRestApi
    MONGODB_URI: ${ssm:${param:defaultResourceName}-mongodb}
  iam:
    role:
      name: ${param:defaultResourceName}-lambda-role
      statements:
        - Effect: "Allow"
          Action: "apigateway:DELETE"
          Resource:
            - Fn::Join:
                - ""
                - - "arn:aws:apigateway:"
                  - ${self:provider.region}
                  - "::/restapis/"
                  - { Ref: ApiGatewayRestApi }
                  - "/stages/"
                  - ${self:provider.stage}
                  - "/cache/data"
  vpc:
    securityGroupIds:
      - ${ssm:${param:defaultResourceName}-securityGroupId}
    subnetIds:
      - ${ssm:${param:defaultResourceName}-subnetId-1a}
      - ${ssm:${param:defaultResourceName}-subnetId-1b}
      - ${ssm:${param:defaultResourceName}-subnetId-1c}

layers:
  layerCommon:
    path: layers/layerCommon
    name: ${param:defaultResourceName}-layer-common

package:
  patterns:
    - "!node_modules/**"
    - "!package-lock.json"
    - "!package.json"
    - "!layers/**"

functions:
  listCourses:
    handler: serverless/functions/Course/listCourses.handler
    events:
      - http:
          path: /courses
          method: get
          cors: true
          caching:
            enabled: true

  readCourse:
    handler: serverless/functions/Course/readCourse.handler
    events:
      - http:
          path: /course/{courseID}
          method: get
          cors: true
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.path.courseID

  updateCourse:
    handler: serverless/functions/Course/updateCourse.handler
    provisionedConcurrency: 5
    events:
      - http:
          path: /course/{courseID}
          method: patch
          cors: true

  createCourse:
    handler: serverless/functions/Course/createCourse.handler
    provisionedConcurrency: 5
    events:
      - http:
          path: /course
          method: post
          cors: true
